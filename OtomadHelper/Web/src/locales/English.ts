export default {
	javascript: {
		metadata: {
			__translator__: "", // Enter the name of the translator (i.e. you) that will be displayed in the translator of the UI.\nIf there are multiple translators, please separate them with line breaks.
			name: "English", // The name of the language in the language.
			culture: "en-US", // The ISO 639 language code for that language; note that it must include the region code.
		},
		colon: ": ", // The colon character in this language.\nIf a space needs to be added after the colon, it should be included.
		semicolon: "; ", // The semicolon character in this language.\nIf a space needs to be added after the semicolon, it should be included.
		enumerationComma: ", ", // The symbol used to separate items in a list, which is a comma in English, 在中文中为顿号, 日本語では中点です.\nIf a space needs to be added after the symbol, it should be included.\nFor example: apple, orange, pear.
		rangeDash: " – ", // The symbol used to represent a range of numerical values, which is an en dash in English, 在中文中为波浪号, 日本語では波線です.\nIf spaces need to be added at both ends of the symbol, they should be included.\nFor example: page 1 – 4.
		titles: {
			home: "Home",
			source: "Source", // Aka Material.
			score: "Score",
			audio: "Audio",
			visual: "Visual",
			track: "Track",
			track_other: "Tracks",
			sonar: "Sonar",
			lyrics: "Lyrics",
			shupelunker: "Shupelunker", // Shupelunker is a portmanteau of Shu (Shuzo Matsuoka) and Spelunker (game).\nIf your language has different translations for those words, try using their correct translations to create a new term instead of simply copying names from English.
			shupelunker_full: "Shupelunker Tactics", // Shupelunker is a portmanteau of Shu (Shuzo Matsuoka) and Spelunker (game).\nIf your language has different translations for those words, try using their correct translations to create a new term instead of simply copying names from English.
			ytp: "YTP",
			ytp_full: "YouTube Poop",
			mosh: "Mosh", // It is the abbreviated form of Datamosh.\nIf there is no plural in your language, please try translating based on the singular form “Mosh” instead of “Moshes”.
			mosh_other: "Moshes",
			mosh_full: "Datamoshes", // If there is no plural in your language, please try translating based on the singular form “Datamosh” instead of “Datamoshes”.
			tools: "Tools",
			management: "Management",
			settings: "Settings",
			effect: "Effect",
			effect_other: "Effects",
			prve: "PV Rhythm Visual Effect", // “PV” stands for Promotion Video.
			prve_other: "PV Rhythm Visual Effects",
			staff: "Staff", // Musical staff.
			staff_full: "Staff Visualizer",
			pixelScaling: "Pixel Scaling",
			parameters: "Parameters",
			grid: "Grid Layout",
			box3d: "3D Box Layout",
			gradient: "Gradient Tracks",
		},
		source: {
			from: "Source from",
			trackEvent: "Track event",
			projectMedia: "Project media",
			browseFile: "Browse file",
			trim: "Trim",
			startTime: {
				_: "Start time",
				projectStart: "Project start",
				cursor: "Cursor",
			},
			afterCompletion: {
				_: "After completion",
				removeSourceClips: "Remove source track clips",
				selectSourceClips: "Select source track clips",
				selectGeneratedClips: "Select all clips generated",
			},
			preferredTrack: {
				_: "Preferred track",
				index: "Preferred track index",
				top: "Top",
				ordinal: "Below the {{count, ordinal}} track",
				belowAdjustmentTracks: "If one or more adjustment tracks are below this track, select the next track that none of them",
				newTrack: "New track",
				quicklySelect: "Quickly select the current track",
			},
			trackGroup: {
				_: "Grouping tracks",
				collapse: "Collapse track groups by default",
			},
			trackName: {
				_: "Name for tracks",
				track: "MIDI track name",
				trackIndex: "MIDI track index",
				instrument: "MIDI instrument name",
				channel: "MIDI channel number",
				clip: "Source clip name",
				media: "Source media name",
				score: "Score file name",
				unnamed: "Unnamed",
				voicebank: "Or singthesized singer name", // Singthesis (a portmanteau of singing + synthesis) refers to music generated by vocal synthesizers like Vocaloid or UTAU. Singthesized is the adjective form of singthesis.\nIf it is difficult‌ to translate, you can substitute‌ it with “Voice synth”.
			},
			secretBox: {
				_: "Secret box",
				limitToSelected: "Limited to selected sources",
				track: "For each track or channel",
				marker: "Switch once per marker",
				barOrBeat: {
					_: "Switch once per bar or beat",
					period: "Period",
					preparation: "Preparation",
				},
			},
			consonant: "Consonant time",
		},
		on: "On", // The label next to a toggle switch.
		off: "Off", // The label next to a toggle switch.
		custom: "Custom",
		enabled: "Enabled",
		enable: "Enable",
		learnMore: "Learn more",
		condition: "Condition",
		underConstruction: "Under construction…",
		systemDefault: "System default",
		complete: "Complete",
		dragToImport: "Drag and drop to import as {{item, lowercase}}",
		save: "Save",
		auto: "Auto",
		back: "Back",
		navigation: "Navigation",
		selectAll: "Select all",
		invertSelection: "Invert selection",
		variableBeginWith: "Variable from {{first, lowercase}}", // For example, if the panning of a score gradually changes from the left channel to the right channel, it will be displayed as “Variable from left”.
		reset: "Reset",
		preset: "Preset",
		preset_other: "Presets",
		new: "New", // Verb. Create new.
		etc: "{{examples}}, etc.",
		offset: "Offset",
		unselected: "Unselected",
		topPriority: "{{item}} first", // Used for sorting forms, if the order of its content is watch, phone, flashlight, it will display as “watch first”.
		browse: "Browse", // Browse files or folders.
		ok: "OK",
		descending: "Descending",
		ascending: "Ascending",
		view: "View", // Generally, it is the name of the first item in the context menu of a Windows directory, which includes tiles, lists, icons, etc.
		size: "Size", // Indicate image size or icon size, etc.
		disabled: "Disabled",
		apply: "Apply",
		unset: "Unset", // Aka do not modify.
		increase: "Increase",
		decrease: "Decrease",
		duration: "Duration",
		preview: "Preview",
		infoBar: {
			warning: "Warning",
		},
		selectionMode: {
			single: "Single", // Aka single select.
			multiple: "Multiple", // Aka multi-select.
		},
		subheaders: {
			moreOptions: "More options",
			advanced: "Advanced",
			config: "Configuration",
			parameters: "Parameters",
			seeAlso: "See also",
		},
		units: {
			piece: "", // [EMPTY IN ENGLISH] This key represents the Mandarin Chinese measure word “个” (gè), used in phrases like “3 个苹果” (3 apples) where English omits counters.\nPlease localize it if your language REQUIRING generic counters (i.e. numeric classifiers):\n- Japanese: “つ” (tsu) as in “3つのリンゴ”\n- Vietnamese: “cái” as in “3 cái táo”\n- Korean: “개” (gae) as in “사과 3개”\nOr keep translation EMPTY (“”) if your language does not use such particles (like English / European languages).\nWARNINGS:\n- DO NOT translate as “ge” or copy Chinese character.\n- DO NOT leave empty for East / Southeast Asian languages.\n- DO NOT include QUOTES (“”) outside.\n- If uncertain, consult: https://wals.info/chapter/55\nEXAMPLES:\n- Simplified Chinese: “个”\n- Traditional Chinese: “個”\n- Japanese: “つ”\n- English: “”\n- German: “”\n- Vietnamese: “cái”\n- Thai: “อัน”
			millisecond: "ms", // Unit: Millisecond.
			percent: "%", // Unit: Percent.
			pixel: "px", // Unit: Pixel.
			beatPerMinute: "BPM", // Unit: Beat per minute.
			semitone: "st", // Unit: Semitone.
			degree: "°", // Unit: Degree.
			bar: "bar", // Unit: Bar or Measure. In musical notation, a bar (or measure) is a segment of music bounded by vertical lines, known as bar lines.
			bar_other: "bars",
			beat: "beat", // Unit: Beat. In music and music theory, the beat is the basic unit of time, the pulse (regularly repeating event), of the mensural level.
			beat_other: "beats",
			densityIndependentPixel: "dp", // Unit: Density independent pixel.
			times: "×", // E.g., speed 1×, 1.5×, 2×.
			cent: "cent", // Unit: Cent. The cent is a logarithmic unit of measure used for musical intervals. Twelve-tone equal temperament divides the octave into 12 semitones of 100 cents each.
			cent_other: "cents",
		},
		confirm: {
			delete: {
				backgroundImage: "Are you sure you want to delete this background image?",
			},
			enableImproveTranslation: "Are you sure you want to enter the In-Context Localization Tool to improve translation?",
		},
		curve: {
			_: "Interpolation curve",
			linear: "Linear",
			fast: "Fast",
			slow: "Slow",
			smooth: "Smooth",
			sharp: "Sharp",
			hold: "Hold",
		},
		fileFormats: {
			allFiles: "All Files",
			txt: "Text Documents",
			midi: "MIDI Sequence Files",
			singthesis: "All Supported Singthesis Project Files", // Singthesis (a portmanteau of singing + synthesis) refers to music generated by vocal synthesizers like Vocaloid or UTAU.\nIf it is difficult‌ to translate, you can substitute‌ it with “Voice synth”.
			ust: "UTAU/OpenUTAU Sequence Text Files",
			vsq: "Vocaloid Sequence Files",
		},
		score: {
			from: "Score from",
			midi: "MIDI",
			singthesis: "Singthesis", // Singthesis (a portmanteau of singing + synthesis) refers to music generated by vocal synthesizers like Vocaloid or UTAU.\nIf it is difficult‌ to translate, you can substitute‌ it with “Voice synth”.
			refOtherTracks: "Refer to other tracks",
			tts: "Text to speech",
			pureNotes: "Pure notes",
			encoding: "Encoding",
			tempo: {
				_: "Tempo",
				variableScore: "Variable score tempo",
				constantScore: "Constant score tempo",
				project: "Project tempo",
			},
			timeSignature: "Time signature",
			constrain: {
				_: "Constrain note length",
				none: "Unconstrained",
				max: "Max length",
				fixed: "Fixed length",
			},
			trackOrChannel: "Track / Channel",
			musicalTrack: "Track",
			musicalTrack_other: "Tracks",
			channel: "Channel",
			channel_other: "Channels",
			noteCount: "Note count",
			beginNote: "Begin note",
			pan: {
				_: "Pan",
				left: "Left",
				right: "Right",
				center: "Center",
			},
			instrument: "Instrument",
			drumKit: "Drum kit",
		},
		stream: {
			stretch: {
				_: "Stretch",
				noStretching: "No stretching",
				flexingAndExtending: "Flexing & extending",
				extendingOnly: "Extending only",
				flexingOnly: "Flexing only",
			},
			loop: "Loop",
			playbackRate: {
				_: "Playback rate",
				based: "Adjust based on current rate",
				sync: "Synchronize audio and visual configurations",
			},
			normalize: {
				_: "Normalize",
				once: "Once", // Normalize only once.
				always: "Always", // Normalize every time.
			},
			staticVisual: "Static visual",
			truncate: {
				_: "Truncate",
				lengthenable: "Lengthenable",
				freezeEndFrames: "Freeze end frames",
				trimEndFrames: "Trim end frames",
				splitThenFreeze: "Split then freeze",
				freezeToGray: "Freeze to gray",
				freezeToPreset: "Freeze to preset",
			},
			legato: {
				_: "Legato",
				portato: "Portato",
				upToOneBeat: "Up to 1 beat",
				upToOneBar: "Up to 1 bar",
				unlimited: "Unlimited",
			},
			multitrackForChords: "Multitrack for chords",
			createGroups: "Create groups",
			autoPan: "Auto pan",
			stack: "Stack",
			timeUnremapping: "Time unremapping", // Time un-remap-(p)ing is the antonym of time remapping.\nIf it is difficult‌ to translate, you can substitute‌ it with “Persistent timeflow”.
			resampleImitatively: "Resample imitatively",
			transition: {
				_: "Transition",
				alignment: {
					_: "Alignment",
					center: "Center at cut",
					start: "Start at cut",
					end: "End at cut",
				},
			},
			transformMethod: {
				_: "Transform method",
				panCrop: "Pan/Crop",
				pictureInPicture: "Picture in Picture",
				transformOfx: "TransformOFX",
			},
			playingTechniques: {
				_: "Playing techniques",
				applyCustomPreset: "Apply custom preset",
				glissando: {
					_: "Glissando",
					swirl: "Swirl",
					wave: "Wave",
					tv: "TV",
					pingpong: "Ping-Pong",
					swirlAmount: "Swirl amount",
				},
				appoggiatura: {
					_: "Appoggiatura",
				},
				arpeggio: {
					_: "Arpeggio",
				},
			},
			tuning: {
				_: "Tuning",
				tuningMethod: {
					_: "Tuning method",
					noTuning: "No Tuning",
					pitchShift: "Pitch Shift",
					elastic: "Élastique",
					classic: "Classic",
					scaleless: "Scaleless",
					acid: "ACID", // Indicate MAGIX ACID Pro.
				},
				stretchAttributes: {
					_: "Stretch attributes",
				},
				alternativeForExceedTheRange: {
					_: "If exceeds the range",
					multiple: "Multiple use of Audio Effect Plugins",
					plugin: "Switch to Pitch Shift Audio Effect Plugin",
					octave: "Higher / lower octaves",
					octaveExp: "Higher / lower octaves (Experimental)",
					wrap: "Wrap to top / bottom",
					silent: "Silent",
				},
				resample: "Resample",
				preserveFormant: "Preserve formant",
				basePitch: {
					_: "Base pitch",
					cent: "Cent",
					based: "Adjust based on current pitch shift",
					auto: "Automatic tuning",
				},
				prelisten: {
					_: "Prelisten",
					basePitch: "Prelisten base pitch",
					audio: "Prelisten audio",
					stop: "Stop prelistening",
					engine: "Engine",
					waveform: {
						_: "Waveform",
						sinusoid: "Sinusoid",
						triangle: "Triangle",
						square: "Square",
						sawtooth: "Sawtooth",
					},
					volumeForBasePitch: "Volume when prelistening base pitch",
					adjustAudioToBasePitch: "Adjust audio to base pitch",
				},
			},
			mapping: {
				_: "Mapping",
				velocity: "Velocity",
				pitch: "Pitch",
				pan: "Pan",
				progress: "Progress",
			},
			preset: {
				add: "Add to custom presets",
			},
			parameters: {
				copyFromAnotherParameterScheme: "Copy from another parameter scheme here",
				copyAttributesFromSelectedClip: "Copy attributes from selected clip",
			},
		},
		track: {
			layout: "Layout",
			grid: {
				array: "Array",
				square: "Square",
				fixedColumns: "Fixed columns",
				fixedRows: "Fixed rows",
				column: "Column",
				column_other: "Columns",
				row: "Row",
				row_other: "Rows",
				min: "Minimum",
				max: "Maximum",
				transpose: "Transpose",
				numberOfSelectedTracks: "Number of selected tracks",
				fastFill: "Fast fill",
				direction: {
					_: "Direction",
					lrTb: "Horizontal",
					tbLr: "Vertical",
					rlTb: "Reverse horizontal",
					tbRl: "Reverse vertical",
				},
				fit: {
					_: "Fit",
					cover: "Cover",
					contain: "Contain",
				},
				mirrorEdges: {
					_: "Mirror edges",
					unflipped: "Unflipped",
					hFlip: {
						even: "Even columns",
						odd: "Odd columns",
					},
					vFlip: {
						even: "Even rows",
						odd: "Odd rows",
					},
					checkerboard: {
						_: "Checkerboard style",
						odd: "Odd-parity squares",
						even: "Even-parity squares",
					},
				},
				padding: "Padding",
			},
			box3d: {
				deleteTracks: "Delete original tracks",
				useLongerSide: "Use longer side of edge length",
				faces: {
					front: "Front",
					back: "Back",
					left: "Left",
					right: "Right",
					top: "Top",
					bottom: "Bottom",
				},
			},
			gradient: {
				effects: {
					rainbow: "Rainbow Colors",
					graduallySaturated: "Gradually Saturated",
					graduallyContrasted: "Gradually Contrasted",
					threshold: "Threshold Variation",
					alternatelyChromatic: "Alternately Chromatic",
					alternatelyNegative: "Alternate Negative",
				},
				view: {
					overlay: "Overlay",
				},
			},
			applyToSelectedTracks: "Apply to selected tracks",
			deactivate: "Deactivate",
			deactivateAll: "Deactivate all",
			legato: {
				_: "Legato",
				stacking: "Stacking clips\nFor current tracks",
				stackingAllTracks: "Stacking clips\nFor all tracks",
				stackingSelected: "Stacking clips\nFor selected clips",
				stackingAllAfter: "Stacking clips\nFor clips all after",
				limitStretch: "Stretching clips\nWithin stretch limits",
				stretch: "Stretching clips\nLengthening when exceed stretch limits",
				lengthen: "Lengthening clips\nChange clips length",
				increaseSpacing: "Increase spacing\nFor current tracks",
				increaseSpacingAllTracks: "Increase spacing\nFor all tracks",
				forClips: "For selected clips only",
				includeGroup: "Include the clips within a group",
				backwards: "Backwards",
			},
			clear: {
				_: "Clear",
				motion: "Clear track motions",
				effect: "Clear track effects",
			},
		},
		sonar: {
			separateDrums: "Separate drums",
			differenceCompositeMode: "Difference composite mode",
			shadow: "Shadow",
			graphs: "Graphs",
		},
		lyrics: {
			// TODO: rename to “related” and move to “t.subtitles” nested.
			useStaticText: "Insert subtitles directly from static text",
			sampleLyrics: "Spicy chicken", // An sample text of karaoke lyrics, you can use any lyrics in your language or translate directly from the original text “Spicy Hotpot Chicken”. Note that the content should not be too long.
			presetTemplate: "Preset template",
			enableMode: "Enable {{mode, lowercase}} mode",
			karaoke: {
				_: "Karaoke",
				futureFill: "Unsung text fill color",
				pastFill: "Sung text fill color",
			},
			pitchNotation: {
				_: "Pitch notation",
				system: "Musical notation system",
				scientific: "Scientific Pitch Notation", // If you want to have more explanations for the musical notation system in the language, please line break after translating the text and write detailed information on the second line.
				helmholtz: "Helmholtz Pitch Notation", // If you want to have more explanations for the musical notation system in the language, please line break after translating the text and write detailed information on the second line.
				solfege: "Solfège Syllable", // If you want to have more explanations for the musical notation system in the language, please line break after translating the text and write detailed information on the second line.
				numbered: "Numbered Musical Notation", // If you want to have more explanations for the musical notation system in the language, please line break after translating the text and write detailed information on the second line.
				gongche: "*Gōngchě* Notation", // If you want to have more explanations for the musical notation system in the language, please line break after translating the text and write detailed information on the second line.
				gongshang: "*Gōngshāng* Notation", // If you want to have more explanations for the musical notation system in the language, please line break after translating the text and write detailed information on the second line.
				lyulyu: "*Lǜlǚ* Notation", // If you want to have more explanations for the musical notation system in the language, please line break after translating the text and write detailed information on the second line.
				midiNumber: "MIDI Pitch Number", // If you want to have more explanations for the musical notation system in the language, please line break after translating the text and write detailed information on the second line.
				frequency: "Frequency", // If you want to have more explanations for the musical notation system in the language, please line break after translating the text and write detailed information on the second line.
			},
		},
		shupelunker: {
			affix: {
				_: "Match pitch affix position",
				prefix: "Prefix",
				suffix: "Suffix",
			},
			unallocated: {
				_: "Unallocated",
				octaves: "Octaves",
				fillUp: "Fill up",
				fillDown: "Fill down",
				default: "Default full coverage",
			},
			exclusiveTrack: "Exclusive track",
			keyMappingZones: "Key mapping zones",
		},
		ytp: {
			constrain: "Constrain length",
			clips: "Clips",
			effects: {
				_: "YTP Effects",
				chorus: "Chorus",
				delay: "Delay",
				changePitch: "Change Pitch",
				reverse: "Reverse",
				changeSpeed: "Change Speed",
				vibrato: "Vibrato",
				changeHue: "Change Hue",
				rotateHue: "Rotate Hue",
				monochrome: "Monochrome",
				negative: "Negative",
				repeatRapidly: "Repeat Rapidly",
				randomTuning: "Random Tuning",
				upsize: "Upsize",
				spherize: "Spherize",
				mirror: "Mirror",
				highContrast: "High Contrast",
				oversaturation: "Oversaturation",
				emphasizeThrice: "Thrice to Emphasize",
				twist: "Twist",
				pixelate: "Pixelate",
				spectrum: "Spectrum",
				thermal: "Thermal Vision",
				emboss: "Emboss",
				bump: "Bump",
				edge: "Find Edges",
			},
			sideEffects: {
				wave: "Wave",
				pitchDown: "Pitch-Down",
				pitchUp: "Pitch-Up",
				pitchUpOrPitchDown: "Pitch-Up or Pitch-Down",
				hFlipWithRhythm: "Horizontal Flip with Rhythm",
				loud: "Loud",
				sporadicUpsizeFocusMotion: "Sporadic Upsize Focus Motion",
			},
		},
		mosh: {
			datamosh: "Datamosh",
			datamix: "Datamix",
			layer: "Layer",
			render: "Render",
			scramble: "Scramble",
			automator: "Automator",
			stutter: "Stutter",
			shake: "Shake",
			specifyClipsFolder: "Specify Datamosh clips folder",
			install: "Download Datamosh Extension Pack",
		},
		tools: {
			flow: "Flow",
			selector: "Selector",
			replacer: "Replacer",
			propertizer: "Propertizer",
			subtitles: "Subtitles",
			effector: "Effector",
			fader: "Fader",
			exportScore: "Export Score",
			converters: "Converters",
			clawer: "Clawer",
		},
		selectInfo: {
			source: "{{count}} media source has been selected",
			source_other: "{{count}} media sources have been selected",
			track: "{{count}} track has been selected",
			track_other: "{{count}} tracks have been selected",
			videoTrack: "{{count}} video track has been selected",
			videoTrack_other: "{{count}} video tracks have been selected",
			audioTrack: "{{count}} audio track has been selected",
			audioTrack_other: "{{count}} audio tracks have been selected",
			trackEvent: "{{count}} track event has been selected",
			trackEvent_other: "{{count}} track events have been selected",
			videoEvent: "{{count}} video track event has been selected",
			videoEvent_other: "{{count}} video track events have been selected",
			audioEvent: "{{count}} audio track event has been selected",
			audioEvent_other: "{{count}} audio track events have been selected",
			trackEventOnlyOne: "You must select ONE and only ONE track event, no more and no less",
			videoEventOnlyOne: "You must select ONE and only ONE video track event, no more and no less",
			audioEventOnlyOne: "You must select ONE and only ONE audio track event, no more and no less",
		},
		prve: {
			initialValue: "Initial value",
			control: {
				general: "General",
				general_full: "General control",
				samePitch: "Same pitch",
				samePitch_full: "Consecutive same pitch control",
				differentSyllables: "Different syllables",
				differentSyllables_full: "Consecutive different syllables control",
			},
			classes: {
				_: "Classes",
				flip: "Flip Class",
				rotation: "Rotation Class",
				scale: "Scale Class",
				mirror: "Mirror Class",
				invert: "Invert Class",
				hue: "Hue Class",
				chromatic: "Monochrome Class",
				time: "Time Class",
				time2: "Time Class 2",
				ec: "Expansion & Compression Class",
				swing: "Swing Class",
				blur: "Blur Class",
				wipe: "Wipe Class",
			},
			effects: {
				normal: "Normal",
				hFlip: "Horizontal Flip",
				vFlip: "Vertical Flip",
				ccwFlip: "Counterclockwise Flip",
				cwFlip: "Clockwise Flip",
				rotate: "Rotate",
				ccwRotate: "Counterclockwise Rotation",
				cwRotate: "Clockwise Rotation",
				turned: "Turned",
				zoomOutIn: "Zoom Out In",
				hMirror: "Horizontal Mirror",
				vMirror: "Vertical Mirror",
				ccwMirror: "Counterclockwise Mirror",
				cwMirror: "Clockwise Mirror",
				negative: "Negative",
				luminInvert: "Luminance Invert",
				negativeFade: "Negative Crossfade",
				negativeLuma: "Negative Luma Fade",
				rotInvertHue: "Rotating Invert, Prioritize Hue",
				rotInvertLumin: "Rotating Invert, Prioritize Luminance",
				altInvertHue: "Alternating Invert, Prioritize Hue",
				altInvertLumin: "Alternating Invert, Prioritize Luminance",
				hueInvert: "Hue Invert",
				stepChangeHue: "{{count}} Step Color Difference",
				stepChangeHue_other: "{{count}} Steps Color Difference",
				chromatic: "Chromatic and Monochrome",
				chromaticFade: "Chromatic and Monochrome Crossfade",
				pingpong: "Ping-Pong Effect",
				whirl: "Love’s Magic Spins Us Round and Round",
				sharpRewind: "Sharp Rewind",
				wobblePeriod: "Wobble Period",
				vExpansion: "Vertical Expansion",
				vExpansionBounce: "Vertical Expansion with Bounce",
				vCompression: "Vertical Compression",
				vCompressionBounce: "Vertical Compression with Bounce",
				vBounce: "Vertical Bounce",
				slantDown: "Slant Down",
				slantUp: "Slant Up",
				puyo: "Puyo Puyo",
				pendulum: "Play Pendulum",
				gaussianBlur: "Gaussian Blur",
				radialBlur: "Radial Blur",
				wipeRight: "Wipe in the Right",
				wipeRight1: "1 Step Wipe in the Right",
				splitVOut: "Split Vertical Out",
			},
			amounts: {
				compression: "Reduction scale",
				puyo: "Deformation ratio",
				pendulum: "Swing angle",
				rotationAngle: "Rotation angle",
				rotationStep: "Steps per cycle",
			},
		},
		pixelScaling: {
			scaleFactor: "Scale factor",
			replaceSourceMedia: "Replace source media",
		},
		settings: {
			about: {
				checkForUpdates: "Check for updates",
				repositoryLink: "Repository",
				documentation: "Documentation",
				translation: "Contribute translation",
				feedback: "Feedback",
				changeLog: "Changelog",
				license: "License",
				version: "Version",
				author: "Author",
				__author__: "Rantetsu Inori",
				originalAuthor: "Original author",
				__originalAuthor__: "Chaosinism",
				translator: "Translator",
				translators: "Translators",
			},
			language: {
				_: "Language",
				improveTranslation: "Improve translation",
				translating: "Translating…",
			},
			appearance: {
				_: "Appearance",
				backgroundImage: {
					_: "Background image",
					opacity: "Opacity",
					tint: "Tint",
					blur: "Blurriness",
				},
				colorScheme: {
					_: "Color scheme",
					light: "Light",
					dark: "Dark",
					auto: "Auto",
					black: "Black",
					contrast: "High Contrast",
				},
				palette: {
					_: "Palette",
					windows: "Windows Default Color",
					vegas: "VEGAS Pro Default Color",
					wallpaper: "Background Image Dominant Color",
					accent: "Accent color",
					background: "Background color",
				},
				transparency: {
					_: "Dialog material",
					acrylic: "Acrylic",
					mica: "Mica",
					micaAlt: "Mica Alt",
					solid: "Solid",
				},
				uiScale: "UI scale",
			},
			preference: {
				_: "Preference",
				autoSwitchSourceFrom: "Auto switch source from",
				autoCollapsePrveClasses: "Auto collapse $t(titles.prve) classes",
			},
			config: {
				hideUsageTips: "Hide usage tips",
			},
			dev: {
				_: "Dev",
				devMode: "Developer mode",
				rtl: "Layout direction right-to-left",
			},
		},
		descriptions: {
			unsupportedBrowser: "We’re sorry but we don’t support your legacy {{browser}} browser, please update!",
			condition: "Specifies when to apply this configuration",
			curve: "Specifies the interpolation curve of the keyframe type",
			source: {
				trim: "Adjusts the in or out point time of the specified source",
				startTime: "Specifies when to start generating from the project",
				preferredTrack: {
					_: "Allows you to specify an existing track to generate (except multitrack)",
					fillingInstructions: "If 0, then generated above all tracks;\nIf positive, then generated below the nth track;\nIf negative, then generated below the nth-to-last track.\nIf any preferred track is specified in Audio or Visual, that will override this option.",
					belowAdjustmentTracks: {
						versionRequest: "Note: This feature requires VEGAS Pro ≥ 19. The current version is {{version}}.",
					},
				},
				trackGroup: {
					_: "Groups tracks by score track",
				},
				trackName: {
					_: "Specifies the name for the generated tracks or track groups",
				},
				secretBox: {
					_: "Randomizes in points for the source.\nThis can result in randomly selected source clips having different base pitches, making it useful only for creating funny videos for entertainment purposes, and barely used for creating high-caliber videos.",
					limitToSelected: "Randomly switches among the selected multiple sources instead of using completely random in points",
					track: "Whether track or channel depends on the Score",
					marker: "When a marker is encountered in the score, the in point of the source will be changed once. If several markers have the same non-empty name, they will use the same in point of the source.",
					barOrBeat: {
						_: "Manually changes the in points of the source at a constant period according to the score",
						period: "Specified the periods to change",
						preparation: "Delay before first execution",
					},
					ytpEnabled: "YTP feature is enabled and it already supports randomization, it is unnecessary to set it here.",
				},
				consonant: {
					_: "To prevent consonants from being stretched or delayed, you can separate the consonant and vowel parts of the same audio or video source so that special optimization can be applied to the consonant part of the source.\nIf at least two audio or video clips are selected, the first clip is considered the initial consonant part, the second clip is considered the vowel part, and the third segment (if any) is considered the final consonant part.",
					ytpEnabled: "YTP feature is enabled and this feature is currently unavailable.",
					secretBoxEnabled: "Secret box feature is enabled and this feature is currently unavailable.",
					manualEnabled: "In Sentence Mixing mode, this feature is enabled automatically.",
				},
			},
			score: {
				trim: "Intercepts the generation time range of the score",
				encoding: "Specifies the text encoding to use when reading the file",
				tempo: "Specifies the beats per minute",
				constrain: "Controls the output length of notes from the score",
				trackOrChannel: "Choose between using MIDI tracks or MIDI channels",
				ytpEnabled: "YTP feature is enabled, it does not depend on the score, so all settings here have no effect.",
			},
			stream: {
				stretch: {
					_: "Stretches the clip instead of changing its duration",
					noStretching: "No stretching allowed, only changes the duration",
					flexingAndExtending: "Stretches whether the note is longer than the clip or not",
					extendingOnly: "Stretches if only the note is longer than the clip, otherwise shortens the duration",
					flexingOnly: "Stretches if only the note is shorter than the clip, otherwise lengthens the duration",
				},
				loop: {
					_: "When the clip is lengthened to the end of the source media, playback starts over",
					unset: "Preserves the original loop setting of the clip unchanged or the default value",
				},
				playbackRate: {
					_: "Changes the playback rate of the clip",
					based: "Multiplies the value by the current rate of the clip to calculate a new rate, rather than directly replacing the current rate",
					sync: "Enable to change the {{stream, lowercase}} playback rate configurations to the ones shown here",
					outSync: "Disable to desynchronize the {{stream, lowercase}} playback rate configurations from here",
				},
				normalize: {
					_: "Normalizes the audio, useful for quiet audio",
					once: "Normalizes only the first time and use the gain after the first normalization for all subsequent clips. This is faster and ensures a consistent gain for all the same clips. But changing the duration may cause other clips to be inappropriate for the gain. (Recommended)",
					always: "Normalizes every time to ensure that each duration of clip has a more appropriate gain. But it is slower and may result in inconsistent gains for all the same clips.",
				},
				staticVisual: "Freezes the frame at the in point of the clip",
				truncate: {
					_: "Attempts to freeze at the out point of the clip to avoid accidentally playing the part beyond the trimming time when some notes are too long",
					lengthenable: "If the note is longer than the clip, lengthens the duration",
					freezeEndFrames: "If the note is longer than the clip, freezes the frame from the clip’s out point",
					trimEndFrames: "If the note is longer than the clip, trims frames after the clip’s out point",
					splitThenFreeze: "If the note is longer than the clip, splits from the clip’s out point, and then freezes the latter’s in point",
					freezeToGray: "If the note is longer than the clip, splits from the clip’s out point, then freezes the latter’s in point, and next applies a Black and White effect to the latter",
					freezeToPreset: "If the note is longer than the clip, splits from the clip’s out point, then freezes the latter’s in point, and next applies a custom preset to the latter",
				},
				legato: "Fills in the gaps between notes",
				truncateAndLegatoConflictInAudio: "Truncating and Legato are conflicting in Audio, you cannot enable them simultaneously!",
				multitrackForChords: "Creates multiple tracks for chords",
				createGroups: "Creates groups for video and audio clips represented by one note",
				autoPan: "Pans the audio using envelope automation",
				stack: "Stacks the clips as tightly as possible on one track, rather than placing the results on separate tracks according to the score track",
				timeUnremapping: "The clip will not reset its in point time when note on occurs, but will continue to play, useful if you only want to apply the effects to the source",
				resampleImitatively: {
					_: "Imitate the resampling behavior in the Visual, causing the stretch to flex as the pitch increases",
					auto: "This will depend on whether resampling is enabled in Audio to ensure that the visual is sync with the audio",
				},
				transition: {
					_: "Overlaps generated sequence clips to add transitions",
					alignment: "Sets the starting offset of transitions",
					duration: "Sets the duration of transitions",
					crossfadeInfo: "Crossfade transitions are inserted by default. However, you can replace them with other transitions later.",
				},
				transformMethod: "Specifies the priority order of target properties for applying transformation keyframes",
				playingTechniques: {
					glissando: {
						_: "Produces an effect when playing pitch bends, slides, or glissandi.",
						swirlAmount: "Specifies the amount of the swirl twist amplitude",
					},
					appoggiatura: {
						_: "Produces an effect when playing appoggiaturas.\nWhen there are one to two sixteenth notes or shorter consecutively, they are considered as appoggiaturas.",
					},
					arpeggio: {
						_: "Produces an effect when playing arpeggios.\nWhen there are three or more sixteenth notes or shorter consecutively, they are considered as arpeggios.",
						negative: "Typically uses negative to represent arpeggios",
					},
				},
				tuning: {
					tuningMethod: {
						_: "Uses a different tuning algorithm",
						noTuning: "No pitch effect",
						pitchShift: "Uses the Pitch Shift Audio Effect Plugin. It is a DirectX plugin with the same algorithm as the Classic Method and can support a wider range of pitches. The extension requires some presets to be loaded before use.",
						elastic: "Uses the Elastic Pitch Change Method. The Élastique Method uses technology from zplane.development, and provides enhanced real-time time stretching and pitch-shifting capabilities. It is just the default method to directly press the +/− keys.",
						classic: "Uses the Classic Pitch Change Method. It uses the old technology from Vegas Pro 8 and below versions, and provides more crossfade types to choose from, depending on your source.",
						scaleless: "Locks stretch and pitch, and changes the stretch to get the corresponding pitch regardless of the actual note pitch, just for fun",
						unset: "Preserves the original tuning method of the clip unchanged or the default value, even if it is No Tuning",
						acid: "Transposes the clip to fit the tempo if you are using ACIDized loops rendered by ACID Pro",
						evaluates: {
							fast: "Fast to generate",
							changeRate: "Effective on playback rate change",
							exceedTheRange: "Can work exceed the range",
						},
					},
					stretchAttributes: "Detailed configuration of the selected tuning method",
					alternativeForExceedTheRange: {
						_: "Handles out of range notes with an alternative method",
						plugin: "Reaches any pitch by using the Pitch Shift Audio Effect Plugin repeatedly",
						octave: "At least avoid dissonant intervals by raising or lowering the octave scale to the range of {{formulaFor24}}",
						octaveExp: "VEGAS actually supports a range of {{formulaFor39}} internally, use with caution as it may cause VEGAS to crash",
						wrap: "Returns to the highest or lowest key within the range of {{formulaFor24}}",
						silent: "Mutes those notes",
					},
					resample: "Adjusts stretch to change pitch in sync, causing the stretch to flex as the pitch increases, presenting a classic tape recorder style",
					preserveFormant: "Maintains voice tone characteristics while tuning",
					basePitch: {
						_: "Specifies the base pitch of the audio clip",
						cent: "Fine tune pitch",
						based: "If you have changed the pitch in audio properties or effect plugins, adjustments will continue based on those values instead of resetting them",
					},
					prelisten: {
						_: "Compares the clip to the base pitch for easy adjustment",
						adjustAudioToBasePitch: "Match the audio of the clip to the base pitch instead of the other way around, useful for older styles of remixes",
					},
				},
				effects: {
					prve: "Makes your visuals more rhythmic",
					staff: "Uses custom patterns as notes to draw visuals similar fashion to piano staff sheets",
					pixelScaling: "Scaling using nearest neighbor hard edge amplification and interpolation algorithms",
				},
				mapping: {
					_: "Maps the properties of notes to the specified item",
				},
				preset: {
					_: "Uses or saves predefined parameter schemes for your convenience",
				},
			},
			track: {
				_: "In YTPMV creation, layout and composition design are the core links of visual logic. Its main goal is to deeply integrate multisource with music rhythm through dynamic composition, which not only creates confusion and impact, but also maintains the readability of visuals. Knowing how to make a good visual layout for YTPMV will make it more interesting than you think.\nAs the core of the visual, the source corresponding to the melody sample needs to be enlarged, topped, or given a high-contrast color to enhance the sense of existence. Then use dynamic hierarchical management to distinguish between primary and secondary elements. For example, the background source can reduce transparency to avoid domination. You can try non-linear arrangement, break the traditional grid layout, and use random stacking, displacement overlapping, or other techniques to mimic the visual tension of “information overload”. Establish a hidden order by repeating certain elements, and create a sense of surprise by adding local mutations. For example, repeat the avatar as a visual anchor, but overlay different effects each time it appears.\nThe layout and composition design of YTPMV is essentially “controlled chaos” that endows the content with internal structure through basic design principles such as contrast and alignment. This design not only requires technology, but also relies on the intuitive grasp of cultural aesthetics in its creation, and ultimately realizes the unique experience of “order in disorder”.",
				grid: {
					square: "Creates a standard grid layout such as 2×2, 3×3, etc. based on the number of tracks",
					fixedColumns: "Customizes a fixed number of columns in the grid layout, and the rows will automatically adapt to the columns",
					fixedRows: "Customizes a fixed number of rows in the grid layout, and the columns will automatically adapt to the columns",
					direction: {
						lrTb: "From left to right, then from top to bottom",
						tbLr: "From top to bottom, then from left to right",
						rlTb: "From right to left, then from top to bottom",
						tbRl: "From top to bottom, then from right to left",
					},
					fit: {
						_: "Resizes clips to maintain aspect ratio while fitting within the track box",
						cover: "Crops off both sides to fill the entire track box so there are no gaps, but it will make both sides disappear from view\n(aka “Pan and Scan” in Video Framing and “Fill” in Windows Background Settings)",
						contain: "Adds mattes of blank space around to fit the entire clip into the track box so you can see it all, but the gaps become too conspicuous when the aspect ratio differences are significant\n(aka “Letterboxing” or “Pillarboxing” in Video Framing and “Fit” in Windows Background Settings)",
					},
					mirrorEdges: {
						hFlip: "Mirrors the tracks by flipping the columns in a parity pattern",
						vFlip: "Mirrors the tracks by flipping the rows in a parity pattern",
					},
					padding: "Adjusts the inner margins of track boxes to be less cluttered with other boxes",
					previewAria: "The track located in column {{columnIndex}}, row {{rowIndex}} of a {{columnCount}}-column by {{rowCount}}-row grid.",
				},
				box3d: {
					deleteTracks: "Due to technical limitations, the selected tracks cannot be moved directly. Currently, it can only create new tracks and migrate the clips automatically, but not track motions, effects, or anything else. You will have to migrate them yourself later. You can decide if you want to delete the original tracks. Newly added tracks are not affected.",
					useLongerSide: "Uses the long side instead of the short side as the cube’s edge length if the source is a rectangle, which make the cube more natural",
				},
				gradient: "Gives the video tracks a gradient color effect in your layout",
				legato: {
					_: "Fills in the gaps between the track clips",
					increaseSpacing: "Divides the spacing between each clips",
					forClips: "Applies legato to selected clips only instead of the entire track",
					includeGroup: "Also applies to the grouped clips",
					backwards: "Applies legato backwards",
				},
				deactivate: "Reset the status of this layout to deactivate it",
				view: "Changes the preview only, without affecting the results",
				descending: "Reverses the order in which the tracks are applied",
			},
			sonar: {
				_: "Sonar (Motion Graphics generation feature) is a tool that automatically generates Mographs based on the music rhythm, using the shapes of “Cookie Cutter” effect. The trigger signals of various percussion instruments are linked to preset graphic elements via the score (especially the data of channel 10, where the drum kit is located). These graphics change with the rhythm to create the rhythm-driven “visual beat” effect. For example, the kick generates an enlarged square, the snare drives a rotating diamond, and the crash triggers a diffuse circle, forming an immersive experience of “sound visualization”.\nMotion Graphics (Mograph) is an art form that combines graphic design and animation to convey information or emotion through the motion of graphics, text, and other elements. In the creation of Otomad, Mographs are often used to replace traditional source editing, and abstract graphics are used to create a purely visual rhythmic expression. For example, the visuals may be filled with dense geometric shapes during the climax of the music, while a sense of breathing is created by slowly deforming fluid patterns during the soothing paragraphs. Such creations are often titled *Graphics* or *Shapes* to emphasize the core concept of “playing music with visuals”.",
				// The name of this effect, “Sonar”, was coined by Motosai.
				enabled: "Enables sonar effects if the active tracks in the score contain drum kits",
				separateDrums: "Places each drum on its own track",
				differenceCompositeMode: "Makes the tracks created with difference blend, this will present a shadow puppet style",
				shadow: "Adds shadows to graphs",
			},
			lyrics: {
				_: "If the score contains lyrics data, such as a singing voice synthesizer software project file, it can automatically generate dynamic subtitles to achieve an immersive experience of audio and visual synchronization. This feature includes the following sub-modes:\nKaraoke mode can generate word-for-word synchronized dynamic subtitles. The lyrics are presented as colored progress bars. The currently sung words are highlighted in real time (i.e. change from white to fluorescent). The unsung part retains its basic color, precisely for the duration of each syllable.\nIn Pitch Notation mode, if the score does not contain lyrics, the note pitches can be converted into subtitles that jump with the performance in real time. This mode supports multiple notation systems.",
				presetTemplate: "Select a Title & Text Media Generator preset to use as a template for lyrics",
				karaoke: {
					_: "Uses karaoke style subtitles, the color indicator would reflect the progress of the current phrase",
					futureFill: "Specifies the text fill color for the lyrics that have not yet been sung",
					pastFill: "Specifies the text fill color for the lyrics that have been being sung", // Present Perfect Continuous Tense Passive Voice.
				},
				pitchNotation: {
					_: "Visualizes the pitch of the current note as text",
					system: "Uses a different system of musical notation",
				},
			},
			shupelunker: {
				_: "Shupelunker Tactics is a kind of YTPMV/Otomad creation technique that subverts the traditional tuning logic. The core is to directly use the base pitch of the audio source to achieve harmony with the melody of the music through precise editing. When creating, it is necessary to select the pieces from the source that fully match the target scale and arrange them in melodic order to form a performance effect similar to LaunchPad. Since the whole process is unpitched, the base pitch of the source must be highly consistent with the melody of the music, so a wider breadth of source libraries is required. Its characteristic is that through fragmented editing and high-speed switching, it not only retains the real texture of the base pitch of the source, but also creates a sense of galloping like incantation chanting, which is especially suitable for songs with compact rhythms and rich scale changes.\nIn contrast, if the pitch of the source clip does not match the melody, “Tartar Tactics” will be generated. It is also unpitched, and synchronization is achieved through extreme rhythmic control, such as articulating clips in portato, stretching or reversing clips, and forcing the source rhythm to match the original song. Inspired by the breakbeat logic of Drum ’n’ Bass, it creates a mechanical impulse like audio-visual impact through high-frequency fragmented editing. Although the content of the production is “meaningless incantation”, it can produce a unique sense of rhythm through the precise arrangement of the rhythm.",
				// The name of this tactic originated in Otomad, whose first creation using this tactic had the title of being a parody of Shu (Shuzo Matsuoka) netaed with Spelunker (game), hence the name. This method was also used in early YTPMV, but it never had an official name or method title, it is more like a meme to use this method in a similar way that most YTPMV from the late 2000s to mid 2010s would use.
				affix: "The base pitches of the clips need to be detected by naming them, please specify whether the pitch info should be a prefix or suffix to the clip name",
				unallocated: {
					_: "Specifies how to fill the vacancies if the sources do not cover all keys",
					octaves: "Fills in with the nearest higher or lower octave clips, this has the highest priority, useful for sources with sung solfèges",
					fillUp: "Fills the missing higher keys with their lower neighbors, but the lowest keys are filled from their nearest higher neighbor, this has higher priority than “Fill down”",
					fillDown: "Fills the missing lower keys with their higher neighbors, but the highest keys are filled from their nearest lower neighbor",
					default: "Uses the first clip without any affixes to cover all remaining vacancies, this has the lowest priority",
				},
				exclusiveTrack: "Ensure that each clip of the source remains in the same position, but if there are too many clips, they will take up too much space",
				offset: "Offsets the clips corresponding to the keys as a whole",
			},
			ytp: {
				_: "YouTube Poop (YTP) uses various effects to create videos with deconstruction, collage and absurdism at its core. YTP supports multisource.\nYTP is a Neo-Dada art practice in the digital era. Through editing, repetition, speed change, inversion and other technologies, the sources are reassembled into an illogical “video remix”, deliberately imitating the low-quality, low-technology aesthetic style to tease the seriousness and standardization of mainstream video culture. For example, the actions of the characters are played circularly, the lines with broken meanings are superimposed, or the abrupt sound effects are inserted to create an audio-visual effect that is both absurd and humorous.\nYTP rebelled against traditional narrative logic and challenged the audience’s inherent perception of “meaning”. Deconstructing the content of mainstream media through digital editing technology, and transforming cultural symbols into meaningless “electronic garbage”. Their works often follow the principle of “chaos is aesthetics”, such as an endless cycle of absurd clips or distorted role dialogues, forming a unique postmodern art language. YTP’s creative threshold is low, but its artistic value lies in reflecting on the essence of media — highlighting the vulnerability of digital media due to technical defects. Although YTP is an Internet meme, it is actually a continuous digital art experiment that redefines the boundary between entertainment and criticism.",
				constrain: "Controls the length of the clips to be generated",
				clips: "Sets the number of the clips to generate",
				effects: "Specifies the effects for YTP",
			},
			mosh: {
				normal: "Datamosh is a technique of damaging clips to create glitchy effects.",
				// cspell:disable-next-line
				glitchy: "Ða̵̝̻͔͎͋̇͑̆ƭą̬͉̫̐͑̓̄ͅa̸͎͇͗̌͂̈̀ą̸̝̼̦̤̇̐ǎ̛͍́̑a̸̲͙͛̐̄̎̚͜a̢̨̝̟͎̾̔̊ǎ̤̞͈͑a͈̪̣̍₥o̻̪̬̘̲͆͂͠o̸͍̞͔̓̆̊̀o̗͊̇̇̈́̇ǫ͇͗̏̕͜ơ̬͍͚̦̯̓̊͌ò͈̦̫̈́̓o̦̣̲̊̀o̪̪͚̺̘͛̽̏̈́ƨλ ïƨ á ƭèçλñï9úè ôƒ δá₥áϱïñϱ çℓïƥƨ ƭô çřèáƭè ϱℓïƭçλ¥ èƒƒèçƭƨ.",
				additional: "Datamosh creates visual distortions, color distortions, pixel misplacements, and other visual effects, as well as the blurred screen state when the electronic device suddenly fails. Unlike conventional filters or effects, Datamosh directly modifies the underlying coding structure of the video, such as deliberately disrupting the frame sequence of the video or mixing data streams from different clips, making the visuals appear as illogical dynamic splices during playback, forming a “digital tearing sensation” similar to signal interference. For example, the characters’ actions suddenly split into overlapping remnants.\nAlthough the operating principle of Datamosh involves technical details, its aesthetic core is very intuitive: it transforms “errors” into a stylized visual language. Like the noise screen that appears when the signal from an analog TV is bad, the error effect of Datamosh is no longer a problem to be repaired, but a digital aesthetic symbol to be actively pursued. This technology is particularly suitable for creating scenes that need to show cyberpunk, retro technology, or abstract narration, so that the audience can feel an alternative artistic tension from the cracks of broken data.",
				datamosh: "Datamoshes the video, preferably on the timeline with lots of moving visuals",
				datamix: "Applies the motion of one clip to the visual of another clip",
				layer: "Makes multilayering by copying the video clip repeatedly",
				render: "Prerenders a portion of the timeline which may contain very complex video edits, and replaces it with a single video clip",
				scramble: "Chops the clips into a pile of fragments and shuffles them",
				automator: "Adds random keyframes to each frame automatically for each effect you have added to the video clips",
				stutter: "Stutters the clips by forwarding and reversing them in randomized intervals",
				shake: "Shakes or wiggles the clips by using Pan/Crop",
				notInstalled: "The Datamosh Extension Pack is not installed and will not be available for full features until it is downloaded.",
			},
			tools: {
				_: "These QoL features make creating YTPMVs a little less painful to work with or setup. They do not require adjustments to any of the previous parameters.",
				flow: "Creates stunning animations using Beziér Curves",
				selector: "Finds and selects all clips that match the specified criteria",
				replacer: "Replaces the selected clips with the specified new clips",
				propertizer: "Sets properties (e.g., normalize, stretch) for all selected clips in batches",
				subtitles: "Presets the “Titles & Text” preset, then add multiple lines of text here",
				effector: "Applies effects to the selected clips",
				fader: "Adjusts the properties (e.g., gain, volume, opacity) of selected clips in a fade in or out manner one by one",
				exportScore: "Exports the clips in the selected tracks to a score sequence file",
				converters: {
					tuningMethod: "Changes the tuning algorithm for the selected audio clips",
					transformMethod: "Changes the target properties of the transformed keyframes to be applied to the selected video clips",
					clawer: "Changes the music beats or time signatures to create interesting new rhythms",
				},
			},
			staff: {
				_: "Staff Visualizer is a visual effect that transforms musical symbols into creative visual graphics. At its core, it replaces traditional notes with custom patterns (e.g., avatars, geometric shapes, etc.) and places them at the proper pitch of the staff based on the melody of the music, forming a dynamic visual with both artistry and functionality. This visual effect style is inspired by the combination of digital art and music, the creations of YouTuber Grant Woolard. His video is characterized by transforming musicians’ avatars into notes, dynamically arranging them on the staff, and playing classical music. It not only preserves the pitch logic of the score, but also gives it a personalized visual narrative.\nThis effect can be used for artistic creation and performance visual design, such as transforming the artist’s performance into a dynamic staff art projection, or creating interactive music animations for digital album covers. Its innovation lies in breaking the static limit of traditional music scores, reinterpreting the musical structure with visual language, and transforming abstract melodies into perceptible “visual melodies”.",
			},
			prve: {
				control: {
					general: "Normal condition controls for nonconsecutive events and consecutive events of different pitches and the same syllable in YTPMV or Sentence Mixing mode.\nIf other separate controls are off, they are also included in the case.",
					samePitch: "Separate controls for consecutive events of the same pitch in YTPMV or Sentence Mixing mode.",
					differentSyllables: "Separate controls for consecutive events of different syllables in Sentence Mixing mode.",
				},
				forceStretch: "The currently used $t(titles.prve, { 'count': {{count}} }) is in the Time Class, which will cause the stretch to be forcibly set to “$t(stream.stretch.flexingAndExtending, nowrapPerWord)” when in that effect, and not controlled by your settings",
				forceStretch_other: "The currently used $t(titles.prve, { 'count': {{count}} }) include the Time Class effects, which will cause the stretch to be forcibly set to “$t(stream.stretch.flexingAndExtending, nowrapPerWord)” when in these effects, and not controlled by your settings",
				stepAria: "Step {{step}} of {{frames}}",
			},
			pixelScaling: {
				_: "Pixel Scaling feature is a lossless scaling technology designed for pixel art or images that require sharp edges. Its purpose is to solve the pixel blurring problem caused by VEGAS’s built-in bilinear interpolation scaling algorithm, which creates a gradual transition by mixing the colors of adjacent pixels and destroys the clear boundary of pixel art. This feature is scaled by the nearest neighbor interpolation algorithm, which directly copies the color value of the nearest pixel, and ensures that the scaled image edge maintains the “hard cut” effect to avoid blurring.\nThis feature is especially applicable to retro game resources, low-resolution UI or scenes that need to enhance pixel style. For example, when scaling an 8-bit game character animation, it can prevent the character contour from being “softened” by smoothing, and ensure that each pixel block is still clear and legible after scaling. Note that you need to configure the FFmpeg environment or install the Datamosh Extension Pack in advance to enable the core processing function.\nAccording to the project resolution, this feature generates a new file of appropriate size using the nearest neighbor interpolation algorithm, and the filename is identified with the suffix “_Scaled”. This process supports any image/video format as well as image sequence files imported into VEGAS.",
			},
			settings: {
				about: "Otomad Helper is a YTPMV/YTP extension for VEGAS Pro that enables VEGAS to accept scores such as MIDI sequence files as input and automatically generate YTPMV tracks.",
				translation: "If you would like to participate in the translation, you are welcome to join as well.",
				language: {
					enableInContextLocalization: "Translation mode is enabled, please switch the target language in the Crowdin dialog.",
					improveTranslation: "Enter the In-Context Localization Tool to improve translation. You need an Crowdin account.",
					translating: "Click to exit the In-Context Localization Tool",
				},
				appearance: {
					colorScheme: {
						black: "for AMOLED dark only",
					},
					invalid: {
						reducedTransparency: "The transparency effects are disabled by the system and the {{option, lowercase}} option may not be effective at this time.",
						contrast: "The high contrast theme is enabled and the {{option, lowercase}} option cannot be changed at this time.",
						systemContrastCannot: "The system high contrast theme is enabled and the {{option, lowercase}} option cannot be changed at this time.",
						systemContrastMayNot: "The system high contrast theme is enabled and the {{option, lowercase}} option may not be effective at this time.",
					},
				},
				preference: {
					autoSwitchSourceFrom: "Changes the source from automatically based on the last selected content",
					autoCollapsePrveClasses: "Collapses other expanded $t(titles.prve) classes automatically when expanding a class",
				},
			},
		},
		empty: {
			disabled: {
				title: "{{name, capitalize}} disabled",
				details: "Enable to generate the {{name, lowercase}}",
			},
			ytpEnabled: {
				partial: {
					title: "YTP enabled, all other related parameters unavailable",
					details: "Disable the YTP feature to use and adjust other parameters",
				},
				fully: {
					title: "YTP enabled, unable to use the {{feature, lowercase}} feature",
					details: "Disable the YTP feature to use the {{feature, lowercase}} feature",
				},
				disableYtp: "Disable YTP",
				gotoYtp: "Go to YTP",
			},
		},
		menu: {
			delete: "&Delete", // Add “&” before a letter to indicate the access key.
			moveForward: "Move &forward", // Add “&” before a letter to indicate the access key.
			moveBackward: "Move &backward", // Add “&” before a letter to indicate the access key.
		},
		aria: {
			navMenu: "Navigation menu",
			breadcrumb: "Breadcrumb",
			commandBar: "Command bar",
			checkboxGroup: "Checkbox group",
		},
	},
	csharp: {
		host: {
			toolTip: {
				importToHere: "Import %1",
			},
		},
		contentDialog: {
			button: {
				ok: "&OK", // Add “&” before a letter to indicate the access key.
				cancel: "&Cancel", // Add “&” before a letter to indicate the access key.
				close: "&Close", // Add “&” before a letter to indicate the access key.
				learnMore: "&Learn more", // Add “&” before a letter to indicate the access key.
			},
			expander: {
				expandDetails: "Expand details",
				collapseDetails: "Collapse details",
			},
			showError: {
				title: "Error",
			},
		},
		wrongOpeningMethod: {
			script: {
				title: "Hey, you misplaced the extension!",
				content: "The new version of Otomad Helper is an extension. Unlike the old version, it is not a script.\n\nPlease move the extension to the Application Extensions directory of VEGAS instead of the Script Menu directory.\n\nLocation:",
			},
		},
		textBox: {
			menu: {
				clearAll: "Clear All",
			},
		},
		colorPicker: {
			title: "Select a Color",
			eyeDropper: "Eye dropper",
			axis: {
				red: "Red",
				green: "Green",
				blue: "Blue",
				hue: "Hue",
				saturation: "Saturation",
				lightness: "Lightness",
				brightness: "Brightness",
				white: "White",
				black: "Black",
				cyan: "Cyan",
				magenta: "Magenta",
				yellow: "Yellow",
				key: "Key / Black",
				luminance: "Luminance",
				aAxisInLab: "a-Axis (−Green ↔ +Red)",
				bAxisInLab: "b-Axis (−Blue ↔ +Yellow)",
				chroma: "Chroma",
				alpha: "Alpha / Opacity",
				hex: "Hexadecimal",
			},
			axisAbbrs: {
				red: "R",
				green: "G",
				blue: "B",
				hue: "H",
				saturation: "S",
				lightness: "L",
				brightness: "B",
				white: "W",
				black: "B",
				cyan: "C",
				magenta: "M",
				yellow: "Y",
				key: "K",
				luminance: "L",
				aAxisInLab: "a",
				bAxisInLab: "b",
				chroma: "C",
				alpha: "Α",
			},
		},
		flyout: {
			confirmDelete: {
				title: "Delete?",
			},
		},
		keybindings: {
			commands: {
				useTrackEventAsSource: "Use Track Event as Source",
				useProjectMediaAsSource: "Use Project Media as Source",
				enableYtp: "Enable YTP Feature",
				disableYtp: "Disable YTP Feature",
				startGenerating: "Start Generating",
			},
		},
		descriptions: {
			colorPicker: {
				eyeDropper: "Pick a color from the screen",
			},
		},
	},
} as const;
