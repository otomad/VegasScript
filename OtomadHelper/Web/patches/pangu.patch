diff --git a/package.json b/package.json
index 3466bbadfb74e01ada397f81866e6b972f24ad68..e3d15dac971be0181ab979436549c11f42601cf8 100644
--- a/package.json
+++ b/package.json
@@ -32,11 +32,7 @@
   "bugs": {
     "url": "https://github.com/vinta/pangu.js/issues"
   },
-  "main": "./dist/node/index.js",
-  "browser": "./dist/browser/pangu.js",
-  "bin": {
-    "pangu": "./dist/node/cli.js"
-  },
+  "main": "./src/shared/core.js",
   "scripts": {
     "pack:chrome": "npm run build:browser && cp -rf ./dist/browser/pangu.min.js ./browser_extensions/chrome/vendors/pangu/pangu.min.js && cd ./browser_extensions/chrome/ && zip -q -r -0 ../paranoid-auto-spacing.zip . && zip -j ../paranoid-auto-spacing.zip ~/Dropbox/Projects/paranoid-auto-spacing/key.pem",
     "pack:firefox": "node ./browser_extensions/firefox/pack.js",
diff --git a/src/shared/core.js b/src/shared/core.js
index 8b2b4ea7ec42a5618519a8a5559b5943b40f6fb0..3ee499a78e583577f8f7e8c252755054bd2e99cc 100644
--- a/src/shared/core.js
+++ b/src/shared/core.js
@@ -1,3 +1,18 @@
+/**
+ * Unicode **Punctuation Space**
+ * @remarks
+ * Space equal to narrow punctuation of a front.
+ *
+ * By default, a punctuation space character \u2008 is used that is narrower than THE SPACE character \u0020 itself,
+ * to avoid making the space look too wide.
+ */
+const PUNCSP = '\u2008';
+
+/**
+ * @param {string} pattern
+ */
+const $r = pattern => new RegExp(pattern, 'gu');
+
 // CJK is short for Chinese, Japanese, and Korean.
 //
 // CJK includes following Unicode blocks:
@@ -16,7 +31,11 @@
 // https://github.com/vinta/pangu
 //
 // all J below does not include \u30fb
-const CJK = '\u2e80-\u2eff\u2f00-\u2fdf\u3040-\u309f\u30a0-\u30fa\u30fc-\u30ff\u3100-\u312f\u3200-\u32ff\u3400-\u4dbf\u4e00-\u9fff\uf900-\ufaff';
+const CJK = '\\p{sc=Han}\\p{sc=Bopo}\\p{sc=Hira}\\p{sc=Kana}〆ー㆐-㆟㇀-\u31ee㈀-㏿';
+// const CJK = '\u2e80-\u2eff\u2f00-\u2fdf\u3040-\u309f\u30a0-\u30fa\u30fc-\u30ff\u3100-\u312f\u3200-\u32ff\u3400-\u4dbf\u4e00-\u9fff\uf900-\ufaff';
+
+/** Math operators or math symbols, but except the midline horizontal ellipsis \u22ef. */
+const SM = '(?![⋯])[\\p{Sm}]';
 
 // ANS is short for Alphabets, Numbers, and Symbols.
 //
@@ -26,50 +45,50 @@ const CJK = '\u2e80-\u2eff\u2f00-\u2fdf\u3040-\u309f\u30a0-\u30fa\u30fc-\u30ff\u
 //
 // some S below does not include all symbols
 
-const ANY_CJK = new RegExp(`[${CJK}]`);
+const ANY_CJK = $r(`[${CJK}]`);
 
 // the symbol part only includes ~ ! ; : , . ? but . only matches one character
-const CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK = new RegExp(`([${CJK}])[ ]*([\\:]+|\\.)[ ]*([${CJK}])`, 'g');
-const CONVERT_TO_FULLWIDTH_CJK_SYMBOLS = new RegExp(`([${CJK}])[ ]*([~\\!;,\\?]+)[ ]*`, 'g');
-const DOTS_CJK = new RegExp(`([\\.]{2,}|\u2026)([${CJK}])`, 'g');
-const FIX_CJK_COLON_ANS = new RegExp(`([${CJK}])\\:([A-Z0-9\\(\\)])`, 'g');
+const CONVERT_TO_FULLWIDTH_CJK_SYMBOLS_CJK = $r(`([${CJK}])[ ]*([:]+|\\.)[ ]*([${CJK}])`);
+const CONVERT_TO_FULLWIDTH_CJK_SYMBOLS = $r(`([${CJK}])[ ]*([~!;,\\?]+)[ ]*`);
+const DOTS_CJK = $r(`([\\.]{2,}|…)([${CJK}])`);
+const FIX_CJK_COLON_ANS = $r(`([${CJK}]):([A-Z0-9\\(\\)])`);
 
 // the symbol part does not include '
-const CJK_QUOTE = new RegExp(`([${CJK}])([\`"\u05f4])`, 'g');
-const QUOTE_CJK = new RegExp(`([\`"\u05f4])([${CJK}])`, 'g');
-const FIX_QUOTE_ANY_QUOTE = /([`"\u05f4]+)[ ]*(.+?)[ ]*([`"\u05f4]+)/g;
+const CJK_QUOTE = $r(`([${CJK}])([\`"״])`);
+const QUOTE_CJK = $r(`([\`"״])([${CJK}])`);
+const FIX_QUOTE_ANY_QUOTE = /([`"״]+)[ ]*(.+?)[ ]*([`"״]+)/g;
 
-const CJK_SINGLE_QUOTE_BUT_POSSESSIVE = new RegExp(`([${CJK}])('[^s])`, 'g');
-const SINGLE_QUOTE_CJK = new RegExp(`(')([${CJK}])`, 'g');
-const FIX_POSSESSIVE_SINGLE_QUOTE = new RegExp(`([A-Za-z0-9${CJK}])( )('s)`, 'g');
+const CJK_SINGLE_QUOTE_BUT_POSSESSIVE = $r(`([${CJK}])('[^s])`);
+const SINGLE_QUOTE_CJK = $r(`(')([${CJK}])`);
+const FIX_POSSESSIVE_SINGLE_QUOTE = $r(`([A-Za-z0-9${CJK}])( )('s)`);
 
-const HASH_ANS_CJK_HASH = new RegExp(`([${CJK}])(#)([${CJK}]+)(#)([${CJK}])`, 'g');
-const CJK_HASH = new RegExp(`([${CJK}])(#([^ ]))`, 'g');
-const HASH_CJK = new RegExp(`(([^ ])#)([${CJK}])`, 'g');
+const HASH_ANS_CJK_HASH = $r(`([${CJK}])(#)([${CJK}]+)(#)([${CJK}])`);
+const CJK_HASH = $r(`([${CJK}])(#([^ ]))`);
+const HASH_CJK = $r(`(([^ ])#)([${CJK}])`);
 
 // the symbol part only includes + - * / = & | < >
-const CJK_OPERATOR_ANS = new RegExp(`([${CJK}])([\\+\\-\\*\\/=&\\|<>])([A-Za-z0-9])`, 'g');
-const ANS_OPERATOR_CJK = new RegExp(`([A-Za-z0-9])([\\+\\-\\*\\/=&\\|<>])([${CJK}])`, 'g');
+const CJK_OPERATOR_ANS = $r(`([${CJK}])([\\+\\-\\*\\/=&\\|<>]|${SM})([A-Za-z0-9])`);
+const ANS_OPERATOR_CJK = $r(`([A-Za-z0-9])([\\+\\-\\*\\/=&\\|<>]|${SM})([${CJK}])`);
 
 const FIX_SLASH_AS = /([/]) ([a-z\-_\./]+)/g;
 const FIX_SLASH_AS_SLASH = /([/\.])([A-Za-z\-_\./]+) ([/])/g;
 
 // the bracket part only includes ( ) [ ] { } < > “ ”
-const CJK_LEFT_BRACKET = new RegExp(`([${CJK}])([\\(\\[\\{<>\u201c])`, 'g');
-const RIGHT_BRACKET_CJK = new RegExp(`([\\)\\]\\}<>\u201d])([${CJK}])`, 'g');
-const FIX_LEFT_BRACKET_ANY_RIGHT_BRACKET = /([\(\[\{<\u201c]+)[ ]*(.+?)[ ]*([\)\]\}>\u201d]+)/;
-const ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET = new RegExp(`([A-Za-z0-9${CJK}])[ ]*([\u201c])([A-Za-z0-9${CJK}\\-_ ]+)([\u201d])`, 'g');
-const LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK = new RegExp(`([\u201c])([A-Za-z0-9${CJK}\\-_ ]+)([\u201d])[ ]*([A-Za-z0-9${CJK}])`, 'g');
+const CJK_LEFT_BRACKET = $r(`([${CJK}])([\\(\\[\\{<>“])`);
+const RIGHT_BRACKET_CJK = $r(`([\\)\\]\\}<>”])([${CJK}])`);
+const FIX_LEFT_BRACKET_ANY_RIGHT_BRACKET = /([\(\[\{<“]+)[ ]*(.+?)[ ]*([\)\]\}>”]+)/;
+const ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET = $r(`([A-Za-z0-9${CJK}])[ ]*([“])([A-Za-z0-9${CJK}\\-_ ]+)([”])`);
+const LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK = $r(`([“])([A-Za-z0-9${CJK}\\-_ ]+)([”])[ ]*([A-Za-z0-9${CJK}])`);
 
 const AN_LEFT_BRACKET = /([A-Za-z0-9])([\(\[\{])/g;
 const RIGHT_BRACKET_AN = /([\)\]\}])([A-Za-z0-9])/g;
 
-const CJK_ANS = new RegExp(`([${CJK}])([A-Za-z\u0370-\u03ff0-9@\\$%\\^&\\*\\-\\+\\\\=\\|/\u00a1-\u00ff\u2150-\u218f\u2700—\u27bf])`, 'g');
-const ANS_CJK = new RegExp(`([A-Za-z\u0370-\u03ff0-9~\\$%\\^&\\*\\-\\+\\\\=\\|/!;:,\\.\\?\u00a1-\u00ff\u2150-\u218f\u2700—\u27bf])([${CJK}])`, 'g');
+const CJK_ANS = $r(`([${CJK}])([A-Za-zͰ-Ͽ0-9@\\$%\\^&\\*\\-\\+\\\\=\\|/¡-ÿ⅐-\u218f✀—➿]|${SM})`);
+const ANS_CJK = $r(`([A-Za-zͰ-Ͽ0-9~\\$%\\^&\\*\\-\\+\\\\=\\|/!;:,\\.\\?¡-ÿ⅐-\u218f✀—➿]|${SM})([${CJK}])`);
 
 const S_A = /(%)([A-Za-z])/g;
 
-const MIDDLE_DOT = /([ ]*)([\u00b7\u2022\u2027])([ ]*)/g;
+const MIDDLE_DOT = /([ ]*)([·•‧])([ ]*)/g;
 
 class Pangu {
   constructor() {
@@ -125,38 +144,38 @@ class Pangu {
       return `${cjk}${fullwidthSymbols}`;
     });
 
-    newText = newText.replace(DOTS_CJK, '$1 $2');
+    newText = newText.replace(DOTS_CJK, `$1${PUNCSP}$2`);
     newText = newText.replace(FIX_CJK_COLON_ANS, '$1：$2');
 
-    newText = newText.replace(CJK_QUOTE, '$1 $2');
-    newText = newText.replace(QUOTE_CJK, '$1 $2');
+    newText = newText.replace(CJK_QUOTE, `$1${PUNCSP}$2`);
+    newText = newText.replace(QUOTE_CJK, `$1${PUNCSP}$2`);
     newText = newText.replace(FIX_QUOTE_ANY_QUOTE, '$1$2$3');
 
-    newText = newText.replace(CJK_SINGLE_QUOTE_BUT_POSSESSIVE, '$1 $2');
-    newText = newText.replace(SINGLE_QUOTE_CJK, '$1 $2');
+    newText = newText.replace(CJK_SINGLE_QUOTE_BUT_POSSESSIVE, `$1${PUNCSP}$2`);
+    newText = newText.replace(SINGLE_QUOTE_CJK, `$1${PUNCSP}$2`);
     newText = newText.replace(FIX_POSSESSIVE_SINGLE_QUOTE, "$1's"); // eslint-disable-line quotes
 
-    newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');
-    newText = newText.replace(CJK_HASH, '$1 $2');
-    newText = newText.replace(HASH_CJK, '$1 $3');
+    newText = newText.replace(HASH_ANS_CJK_HASH, `$1${PUNCSP}$2$3$4${PUNCSP}$5`);
+    newText = newText.replace(CJK_HASH, `$1${PUNCSP}$2`);
+    newText = newText.replace(HASH_CJK, `$1${PUNCSP}$3`);
 
-    newText = newText.replace(CJK_OPERATOR_ANS, '$1 $2 $3');
-    newText = newText.replace(ANS_OPERATOR_CJK, '$1 $2 $3');
+    newText = newText.replace(CJK_OPERATOR_ANS, `$1${PUNCSP}$2${PUNCSP}$3`);
+    newText = newText.replace(ANS_OPERATOR_CJK, `$1${PUNCSP}$2${PUNCSP}$3`);
 
     newText = newText.replace(FIX_SLASH_AS, '$1$2');
     newText = newText.replace(FIX_SLASH_AS_SLASH, '$1$2$3');
 
-    newText = newText.replace(CJK_LEFT_BRACKET, '$1 $2');
-    newText = newText.replace(RIGHT_BRACKET_CJK, '$1 $2');
+    newText = newText.replace(CJK_LEFT_BRACKET, `$1${PUNCSP}$2`);
+    newText = newText.replace(RIGHT_BRACKET_CJK, `$1${PUNCSP}$2`);
     newText = newText.replace(FIX_LEFT_BRACKET_ANY_RIGHT_BRACKET, '$1$2$3');
-    newText = newText.replace(ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET, '$1 $2$3$4');
-    newText = newText.replace(LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK, '$1$2$3 $4');
+    newText = newText.replace(ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET, `$1${PUNCSP}$2$3$4`);
+    newText = newText.replace(LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK, `$1$2$3${PUNCSP}$4`);
 
     newText = newText.replace(AN_LEFT_BRACKET, '$1 $2');
     newText = newText.replace(RIGHT_BRACKET_AN, '$1 $2');
 
-    newText = newText.replace(CJK_ANS, '$1 $2');
-    newText = newText.replace(ANS_CJK, '$1 $2');
+    newText = newText.replace(CJK_ANS, `$1${PUNCSP}$2`);
+    newText = newText.replace(ANS_CJK, `$1${PUNCSP}$2`);
 
     newText = newText.replace(S_A, '$1 $2');
 
@@ -189,3 +208,7 @@ const pangu = new Pangu();
 module.exports = pangu;
 module.exports.default = pangu;
 module.exports.Pangu = Pangu;
+module.exports.convertToFullwidth = pangu.convertToFullwidth.bind(pangu);
+module.exports.spacing = pangu.spacing.bind(pangu);
+module.exports.spacingText = pangu.spacingText.bind(pangu);
+module.exports.spacingTextSync = pangu.spacingTextSync.bind(pangu);
