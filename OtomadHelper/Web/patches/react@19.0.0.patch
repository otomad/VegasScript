diff --git a/cjs/react.development.js b/cjs/react.development.js
index cfb3447ac928e39d837ac23facac14d501a2dbc9..1a03671e110a7dfa2859f56014b2e08ecc06eb27 100644
--- a/cjs/react.development.js
+++ b/cjs/react.development.js
@@ -616,11 +616,14 @@
       }
       throw thenable;
     }
+    function isI18nItem(children) {
+      return !!children?.[Symbol.for("react-i18next.i18n_item")];
+    }
     function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
       var type = typeof children;
       if ("undefined" === type || "boolean" === type) children = null;
       var invokeCallback = !1;
-      if (null === children) invokeCallback = !0;
+      if (null === children || isI18nItem(children)) invokeCallback = !0;
       else
         switch (type) {
           case "bigint":
diff --git a/cjs/react.production.js b/cjs/react.production.js
index c17c8891b4425c224e3539e39cc27c61e29a50a1..e9fdae0796c1406ca31f741f4074602a6adee400 100644
--- a/cjs/react.production.js
+++ b/cjs/react.production.js
@@ -149,11 +149,14 @@ function resolveThenable(thenable) {
   }
   throw thenable;
 }
+function isI18nItem(children) {
+  return !!children?.[Symbol.for("react-i18next.i18n_item")];
+}
 function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
   var type = typeof children;
   if ("undefined" === type || "boolean" === type) children = null;
   var invokeCallback = !1;
-  if (null === children) invokeCallback = !0;
+  if (null === children || isI18nItem(children)) invokeCallback = !0;
   else
     switch (type) {
       case "bigint":
